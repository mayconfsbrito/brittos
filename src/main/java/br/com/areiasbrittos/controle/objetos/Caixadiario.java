package br.com.areiasbrittos.controle.objetos;
// Generated 01/03/2012 13:32:49 by Hibernate Tools 3.2.1.GA

import br.com.areiasbrittos.controle.utils.Dates;
import br.com.areiasbrittos.controle.utils.Horas;
import java.math.BigDecimal;
import java.sql.Date;
import java.sql.Time;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Set;
import javax.swing.JOptionPane;
import br.com.areiasbrittos.persistencia.dao.AbstractDAO;

/**
 * Caixadiario generated by hbm2java
 */
public class Caixadiario implements java.io.Serializable {

    private int idCaixaDiario;
    private Date data;
    private boolean fechado;
    private Time horaFechamento;
    private Set caixadiarioHasContaspagars = new HashSet(0);
    private Set caixadiarioHasContasrecebers = new HashSet(0);

    public Caixadiario() {
    }

    public Caixadiario(Date data, boolean fechado) {
        this.data = data;
        this.fechado = fechado;
    }

    public Caixadiario(int idCaixaDiario, Date data, boolean fechado) {
        this.idCaixaDiario = idCaixaDiario;
        this.data = data;
        this.fechado = fechado;
    }

    public Caixadiario(Date data, boolean fechado, Time horaFechamento, Set caixadiarioHasContaspagars, Set caixadiarioHasContasrecebers) {
        this.data = data;
        this.fechado = fechado;
        this.horaFechamento = horaFechamento;
        this.caixadiarioHasContaspagars = caixadiarioHasContaspagars;
        this.caixadiarioHasContasrecebers = caixadiarioHasContasrecebers;
    }

    public Caixadiario(int idCaixaDiario, Date data, boolean fechado, Time horaFechamento, Set caixadiarioHasContaspagars, Set caixadiarioHasContasrecebers) {
        this.idCaixaDiario = idCaixaDiario;
        this.data = data;
        this.fechado = fechado;
        this.horaFechamento = horaFechamento;
        this.caixadiarioHasContaspagars = caixadiarioHasContaspagars;
        this.caixadiarioHasContasrecebers = caixadiarioHasContasrecebers;
    }

    public int getIdCaixaDiario() {
        return this.idCaixaDiario;
    }

    public void setIdCaixaDiario(int idCaixaDiario) {
        this.idCaixaDiario = idCaixaDiario;
    }

    public Date getData() {
        return this.data;
    }

    public void setData(Date data) {
        this.data = data;
    }

    public boolean isFechado() {
        return this.fechado;
    }

    public void setFechado(boolean fechado) {
        this.fechado = fechado;
    }

    public Time getHoraFechamento() {
        return this.horaFechamento;
    }

    public void setHoraFechamento(Time horaFechamento) {
        this.horaFechamento = horaFechamento;
    }

    public Set getCaixadiarioHasContaspagars() {
        return this.caixadiarioHasContaspagars;
    }

    public void setCaixadiarioHasContaspagars(Set caixadiarioHasContaspagars) {
        this.caixadiarioHasContaspagars = caixadiarioHasContaspagars;
    }

    public Set getCaixadiarioHasContasrecebers() {
        return this.caixadiarioHasContasrecebers;
    }

    public void setCaixadiarioHasContasrecebers(Set caixadiarioHasContasrecebers) {
        this.caixadiarioHasContasrecebers = caixadiarioHasContasrecebers;
    }

    /**
     * Calcula todos os creditos do caixa diário
     *
     * @return
     */
    public BigDecimal getCreditoTotal() {

        BigDecimal credito = new BigDecimal(0);

        for (Iterator it = this.caixadiarioHasContasrecebers.iterator(); it.hasNext();) {
            credito = credito.add(((CaixadiarioHasContasreceber) it.next()).getContasreceber().getValor());
        }

        return credito;
    }

    /**
     * Calcula todos os débitos do caixa diário
     *
     * @return
     */
    public BigDecimal getDebitoTotalTotal() {

        BigDecimal debito = new BigDecimal(0);

        for (Iterator it = this.caixadiarioHasContaspagars.iterator(); it.hasNext();) {
            debito = debito.add(((CaixadiarioHasContaspagar) it.next()).getContaspagar().getValor());
        }

        return debito;
    }

    /**
     * Calcula o saldo total do caixa diário
     *
     * @return
     */
    public BigDecimal getSaldoTotal() {

        return this.getCreditoTotal().subtract(this.getDebitoTotalTotal());
    }

    /**
     * Verifica o bd Fecha os caixas diários de dias posteriores Cria um novo
     * caixa diário para o dia presente caso ele não exista
     */
    public static boolean verificaCaixasBd() {

        //Recupera no bd todos os caixas diários que não sejam do dia presente e ainda estejam em abeto
        //ArrayList<Caixadiario> listCaixas = (ArrayList<Caixadiario>) AbstractDAO.consultar("Caixadiario", "fechado=false AND data!='"+ Dates.getDataHoje() +"'");

        //Verifica se a lista acima contém algum objeto, fecha-o e altera no bd
        /**
         * if(listCaixas.size() > 0){ for(int index = 0; index <
         * listCaixas.size(); index++){ listCaixas.get(index).setFechado(true);
         * try {
         * listCaixas.get(index).setHoraFechamento(Horas.getTime("00:00:00")); }
         * catch (ParseException ex) { JOptionPane.showMessageDialog(null, "Erro
         * ao definir a data no fechamento automático do movimento de caixa de
         * hoje.", "Erro!", JOptionPane.ERROR_MESSAGE); ex.printStackTrace(); }
         * AbstractDAO.alterar(listCaixas.get(index));
         *
         * }
         * }
         */
        
        //Verifica se todos os caixas diários que não são de hoje estão fechados
        if (AbstractDAO.consultar("Caixadiario", "fechado=false AND data!='"+ Dates.getDataHoje() +"'").isEmpty()){
            
            //Verifica se não existe um caixa diário para a data atual e cria-o no bd
            ArrayList<Caixadiario> listCaixas = (ArrayList<Caixadiario>) AbstractDAO.consultar("Caixadiario", "data='" + Dates.getDataHoje() + "'");
            if (listCaixas.isEmpty()) {
                
                Caixadiario cx = new Caixadiario(Dates.getDataHoje(), false);
                AbstractDAO.inserir(cx);
                
            }
        }

        return true;
    }
}